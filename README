A simple compiler for a simple imperative language targeting x86-64 assembly.

Keywords are + - * / < = || && := while if then else input output.

Identifiers are strings of letters and digits (starting with a letter) that
are not keywords.

Numbers are sequences of digits that fit into a 64-bit signed integer.

exp ::= identifier
      | number
      | true
      | false
      | ( exp op exp )

op ::= + | - | * | / | < | = | || | &&

stmt ::= identifier := exp
       | while exp stmt
       | if exp then stmt else stmt
       | { stmts }
       | input identifier
       | output identifier

stmts ::= epsilon
        | stmt stmts

A program is just a stmts.

Relies on the extlib and deriving libraries
